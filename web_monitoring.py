#!/usr/bin/env python3
"""
Web Monitor –¥–ª—è RTMP to RTSP Converter
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ç–æ–∫–æ–≤
"""

from flask import Flask, jsonify, render_template_string
import json
import psutil
import os
from datetime import datetime

app = Flask(__name__)

# HTML —à–∞–±–ª–æ–Ω
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>RTMP to RTSP Converter - Monitor</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .card { background: white; padding: 20px; border-radius: 8px; margin-bottom: 15px; }
        .status-active { color: #4CAF50; font-weight: bold; }
        .status-inactive { color: #f44336; font-weight: bold; }
        .stream-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; }
        .stream-card { border-left: 4px solid #2196F3; }
        .stream-card.active { border-left-color: #4CAF50; }
        .stream-card.inactive { border-left-color: #f44336; }
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #f2f2f2; }
        .btn { padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; margin: 5px; }
        .btn-success { background-color: #4CAF50; color: white; }
        .btn-danger { background-color: #f44336; color: white; }
        .btn-info { background-color: #2196F3; color: white; }
        .system-info { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; }
        .metric { text-align: center; padding: 10px; background: #e3f2fd; border-radius: 4px; }
    </style>
    <script>
        function refreshData() {
            fetch('/api/status')
                .then(response => response.json())
                .then(data => updateDisplay(data))
                .catch(error => console.error('Error:', error));
        }
        
        function updateDisplay(data) {
            document.getElementById('timestamp').textContent = new Date(data.timestamp).toLocaleString();
            document.getElementById('active-count').textContent = data.active_streams;
            document.getElementById('total-count').textContent = data.total_streams;
            
            const container = document.getElementById('streams-container');
            container.innerHTML = '';
            
            Object.entries(data.streams).forEach(([streamId, stream]) => {
                const card = document.createElement('div');
                card.className = `card stream-card ${stream.active ? 'active' : 'inactive'}`;
                card.innerHTML = `
                    <h3>${streamId}</h3>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="${stream.active ? 'status-active' : 'status-inactive'}">${stream.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</span></p>
                    <p><strong>RTMP:</strong> ${stream.rtmp_url}</p>
                    <p><strong>RTSP:</strong> ${stream.rtsp_url}</p>
                    <p><strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> ${stream.quality}</p>
                    ${stream.active ? `
                        <p><strong>PID:</strong> ${stream.pid || 'N/A'}</p>
                        <p><strong>–ó–∞–ø—É—â–µ–Ω:</strong> ${stream.start_time ? new Date(stream.start_time).toLocaleString() : 'N/A'}</p>
                        <p><strong>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏:</strong> ${stream.restart_count || 0}</p>
                    ` : ''}
                    <div>
                        <button class="btn ${stream.active ? 'btn-danger' : 'btn-success'}" onclick="${stream.active ? 'stopStream' : 'startStream'}('${streamId}')">
                            ${stream.active ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}
                        </button>
                        <button class="btn btn-info" onclick="testStream('${stream.rtsp_url}')">–¢–µ—Å—Ç</button>
                    </div>
                `;
                container.appendChild(card);
            });
        }
        
        function startStream(streamId) {
            fetch(`/api/start/${streamId}`, {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    refreshData();
                });
        }
        
        function stopStream(streamId) {
            fetch(`/api/stop/${streamId}`, {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    refreshData();
                });
        }
        
        function testStream(rtspUrl) {
            alert(`–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è ${rtspUrl}:\\n\\nVLC: vlc ${rtspUrl}\\nFFplay: ffplay ${rtspUrl}`);
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(refreshData, 5000);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.onload = function() {
            refreshData();
            updateSystemInfo();
        };
        
        function updateSystemInfo() {
            fetch('/api/system')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('cpu-usage').textContent = data.cpu_percent + '%';
                    document.getElementById('memory-usage').textContent = data.memory_percent + '%';
                    document.getElementById('disk-usage').textContent = data.disk_percent + '%';
                });
        }
        
        setInterval(updateSystemInfo, 10000);
    </script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üé• RTMP to RTSP Converter</h1>
            <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞–º–∏</p>
            <p><strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> <span id="timestamp">-</span></p>
        </div>
        
        <div class="card">
            <h2>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div class="system-info">
                <div class="metric">
                    <h3 id="active-count">0</h3>
                    <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤</p>
                </div>
                <div class="metric">
                    <h3 id="total-count">0</h3>
                    <p>–í—Å–µ–≥–æ –ø–æ—Ç–æ–∫–æ–≤</p>
                </div>
                <div class="metric">
                    <h3 id="cpu-usage">0%</h3>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ CPU</p>
                </div>
                <div class="metric">
                    <h3 id="memory-usage">0%</h3>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ RAM</p>
                </div>
            </div>
        </div>
        
        <div class="card">
            <h2>üé¨ –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∏</h2>
            <div class="stream-grid" id="streams-container">
                <!-- –ü–æ—Ç–æ–∫–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ JavaScript -->
            </div>
        </div>
        
        <div class="card">
            <h2>üìù –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã</h2>
            <div>
                <button class="btn btn-success" onclick="fetch('/api/start_all', {method: 'POST'}).then(() => refreshData())">–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ</button>
                <button class="btn btn-danger" onclick="fetch('/api/stop_all', {method: 'POST'}).then(() => refreshData())">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ</button>
                <button class="btn btn-info" onclick="window.open('/api/logs', '_blank')">–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤</button>
            </div>
        </div>
    </div>
</body>
</html>
"""

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open('streams.json', 'r') as f:
            return json.load(f)
    except:
        return {"streams": {}, "settings": {}}

def get_stream_processes():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞"""
    processes = {}
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if 'ffmpeg' in proc.info['name'] and proc.info['cmdline']:
                cmdline = ' '.join(proc.info['cmdline'])
                if 'rtsp://' in cmdline and 'rtmp://' in cmdline:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º RTSP –ø–æ—Ä—Ç –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                    for part in proc.info['cmdline']:
                        if part.startswith('rtsp://') and ':' in part:
                            port = part.split(':')[2].split('/')[0]
                            processes[port] = {
                                'pid': proc.info['pid'],
                                'cmdline': cmdline
                            }
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return processes

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/api/status')
def api_status():
